name: Blue/Green CI/CD

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  BLUE_DIR: /opt/blue
  GREEN_DIR: /opt/green

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: api-gateway
            dockerfile: ./apps/api-gateway/Dockerfile
          - name: worker
            dockerfile: ./apps/worker/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (blue & green tags)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.name }}:blue
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.name }}:green

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Create SSH key file (for local-run diagnostics if needed)
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Deploy to inactive environment and test (with GHCR login)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            # Ensure active_env exists
            if [ ! -f /opt/active_env ]; then
              echo "blue" > /opt/active_env
            fi
            ACTIVE_ENV=$(cat /opt/active_env)
            if [ "$ACTIVE_ENV" = "blue" ]; then
              INACTIVE_ENV="green"
            else
              INACTIVE_ENV="blue"
            fi

            echo "Active env: $ACTIVE_ENV"
            echo "Deploying to inactive env: $INACTIVE_ENV"

            INACTIVE_DIR="/opt/${INACTIVE_ENV}"
            COMPOSE_FILE="${INACTIVE_DIR}/prod-docker-compose.yaml"

            if [ ! -f "$COMPOSE_FILE" ]; then
              echo "Compose file not found: $COMPOSE_FILE" >&2
              exit 2
            fi

            # Login to GHCR so we can pull private images
            echo "Logging into GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

            # Pull images declared in the compose
            echo "Pulling images for ${INACTIVE_ENV}..."
            docker compose -f "$COMPOSE_FILE" pull

            # Start services (do NOT build)
            echo "Starting services for ${INACTIVE_ENV}..."
            docker compose -f "$COMPOSE_FILE" up -d --no-build

            # Wait for containers to initialize
            sleep 10

            # In-network health check
            echo "Running in-network health check for api-gateway-${INACTIVE_ENV}..."
            docker run --rm --network web curlimages/curl:8 \
              curl -sSf "http://api-gateway-${INACTIVE_ENV}:3000/health" || (echo "api-gateway health check failed" && exit 1)

            # Flip active env
            echo "${INACTIVE_ENV}" > /opt/active_env
            echo "Active environment flipped to: $(cat /opt/active_env)"

            # Reload Caddy to point at new env (script should validate & reload)
            if [ -x /opt/update_caddy_env.sh ]; then
              /opt/update_caddy_env.sh
            else
              echo "/opt/update_caddy_env.sh not found or executable" >&2
            fi

            # Optional prune (use with caution)
            docker system prune -f || true


