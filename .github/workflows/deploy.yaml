name: Blue/Green CI/CD

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  BLUE_DIR: /opt/blue
  GREEN_DIR: /opt/green

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
        packages: write  # Grant write permissions to packages
        contents: read   # Grant read permissions to contents
    strategy:
      matrix:
        service:
          - name: api-gateway
            dockerfile: ./apps/api-gateway/Dockerfile
            tags: |
              ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/api-gateway:blue
              ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/api-gateway:green
          - name: worker
            dockerfile: ./apps/worker/Dockerfile
            tags: |
              ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/worker:blue
              ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/worker:green
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          target: prod
          push: true
          tags: ${{ matrix.service.tags }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize active_env if not exists
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            if [ ! -f /opt/active_env ]; then
              echo "blue" > /opt/active_env
            fi

      - name: Create SSH key file
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i /tmp/ssh_key \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'echo "SSH connection successful"'

      - name: Read active_env
        run: |
          ACTIVE_ENV=$(ssh -o StrictHostKeyChecking=no \
            -i /tmp/ssh_key \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'cat /opt/active_env')
          echo "Current active environment: $ACTIVE_ENV"

      - name: Determine inactive environment
        id: set-env
        run: |
          ACTIVE_ENV=$(ssh -o StrictHostKeyChecking=no \
            -i /tmp/ssh_key \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'cat /opt/active_env')
          if [ "$ACTIVE_ENV" = "blue" ]; then
            INACTIVE_ENV="green"
          else
            INACTIVE_ENV="blue"
          fi
          echo "INACTIVE_ENV=$INACTIVE_ENV" >> $GITHUB_OUTPUT

      - name: Prepare inactive environment
        run: |
          INACTIVE_DIR="/opt/${{ steps.set-env.outputs.INACTIVE_ENV }}"

          # Create the directory if it doesn't exist
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "mkdir -p $INACTIVE_DIR"

          # Remove all files in the inactive directory
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "rm -rf $INACTIVE_DIR/*"

      - name: Copy files using rsync
        run: |
          INACTIVE_DIR="/opt/${{ steps.set-env.outputs.INACTIVE_ENV }}"
          rsync -avz --delete \
            -e "ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no" \
            ${{ github.workspace }}/ \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:$INACTIVE_DIR

      - name: Deploy to inactive environment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            INACTIVE_DIR="/opt/${{ steps.set-env.outputs.INACTIVE_ENV }}"

            # Deploy to the inactive environment
            cd $INACTIVE_DIR
            docker compose -f prod-docker-compose.yaml pull
            docker compose -f prod-docker-compose.yaml up -d --no-build

            # Wait for services to start
            sleep 30

            # Test the new environment
            curl -f http://${{ secrets.VPS_HOST }}:3000 || exit 1

            # Switch traffic
            echo "${{ steps.set-env.outputs.INACTIVE_ENV }}" > /opt/active_env
            echo "Active environment is now: $(cat /opt/active_env)"
            docker restart caddy

            # Clean up old containers
            docker system prune -f
