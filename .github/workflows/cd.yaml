name: ci-cd

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    strategy:
      matrix:
        service: [api]
    # call the reusable workflow
    uses: ./.github/workflows/ci.yaml
    with:
      # dockerfilepath: "services/api/Dockerfile"    # path in repo to the service to be built
      # context: "services/${{ matrix.service }}"
      dockerfilepath: "./Dockerfile"    # path in repo to the service Dockerfile
      context: "."
      image_name: "villeto/${{ matrix.service }}"                   # OWNER/REPO for GHCR: ghcr.io/your-org/api
      platforms: "linux/amd64,linux/arm64"
    secrets:
      # pass through any secrets the reusable workflow or subsequent deploy steps need
      # GITHUB_TOKEN is passed automatically to the called workflow (but if you need a PAT, pass it)
      GHCR_PAT: ${{ secrets.GHCR_PAT }}            # optional: if you need a PAT instead of GITHUB_TOKEN

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy image to VPS (example using SSH)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # login to GHCR on the server (if necessary)
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin

            # the reusable workflow exported the image ref as a job output;
            # when calling a reusable workflow with `uses:` at job-level,
            # the workflow-level outputs are available at:
            #   needs.build-and-deploy.outputs.image
            IMAGE="${{ needs.build-and-deploy.outputs.image }}"

            # # (example) update service .env or override and restart
            # sed -i "s|^IMAGE_TAG=.*|IMAGE_TAG=${IMAGE#ghcr.io/}|" /home/ubuntu/app/services/api/.env
            # cd /home/ubuntu/app
            # docker compose pull api
            # docker compose up -d --no-deps --no-build api
